@page "/"
@using ScheduleWeb.Data
@using System.Timers

<PageTitle>Stream Schedule</PageTitle>

@if (isLiveToday)
{
    <MudText Align=Align.Center Typo=Typo.h6 Style="padding-top: 25px;">The stream starts in..</MudText>
    <MudText Align=Align.Center Typo=Typo.h3 Style="padding-bottom: 10px;">@_streamTimer</MudText>
}
else
{
    <MudText Align=Align.Center Typo=Typo.h3 Style="padding-top: 25px;">No stream today!</MudText>
    <MudText Align=Align.Center Typo=Typo.subtitle1 Style="padding-bottom: 10px;">No stream for the rest of the day! Check back tomorrow!</MudText>
}


<MudPaper Class="align-center justify-center py-8 mud-width-full d-flex">
    <MudStack AlignItems=AlignItems.Stretch>
        <MudPaper Class="pa-3"><MudText Typo=Typo.body1 Align=Align.Center><strong>Monday </strong><ToLocal DateTime=@TStoDT(schedule.Monday) Format="HH:MM"></ToLocal></MudText></MudPaper>
        <MudPaper Class="pa-3"><MudText Typo=Typo.body1 Align=Align.Center><strong>Tuesday </strong><ToLocal DateTime=@TStoDT(schedule.Tuesday) Format="HH:MM"></ToLocal></MudText></MudPaper>
        <MudPaper Class="pa-3"><MudText Typo=Typo.body1 Align=Align.Center><strong>Wednesday </strong><ToLocal DateTime=@TStoDT(schedule.Wednesday) Format="HH:MM"></ToLocal></MudText></MudPaper>
        <MudPaper Class="pa-3"><MudText Typo=Typo.body1 Align=Align.Center><strong>Thursday </strong><ToLocal DateTime=@TStoDT(schedule.Thursday) Format="HH:MM"></ToLocal></MudText></MudPaper>
        <MudPaper Class="pa-3"><MudText Typo=Typo.body1 Align=Align.Center><strong>Friday </strong><ToLocal DateTime=@TStoDT(schedule.Friday) Format="HH:MM"></ToLocal></MudText></MudPaper>
        <MudPaper Class="pa-3"><MudText Typo=Typo.body1 Align=Align.Center><strong>Saturday </strong><ToLocal DateTime=@TStoDT(schedule.Saturday) Format="HH:MM"></ToLocal></MudText></MudPaper>
        <MudPaper Class="pa-3"><MudText Typo=Typo.body1 Align=Align.Center><strong>Sunday </strong><ToLocal DateTime=@TStoDT(schedule.Sunday) Format="HH:MM"></ToLocal></MudText></MudPaper>
    </MudStack>
</MudPaper>
<MudText Typo=Typo.body1 Align=Align.Center Style="padding-top: 5px;">All times above are set to your local time.</MudText>


@code {
    public bool isLiveToday = false;
    public TimeSpan? day = null;

    private string _streamTimer;
    public Data.Models.Schedule schedule;

    public DateTime TStoDT(TimeSpan time)
    {
        return new DateTime() + time;
    }

    protected override void OnInitialized() {

        GetStreamTimer();
        GetSchedule();

    }

    public void GetSchedule()
    {
        using (var db = new DatabaseContext())
        {
            schedule = new Data.Models.Schedule
                {
                    Monday = db.Schedule.FirstOrDefault().Monday,
                    Tuesday = db.Schedule.FirstOrDefault().Tuesday,
                    Wednesday = db.Schedule.FirstOrDefault().Wednesday,
                    Thursday = db.Schedule.FirstOrDefault().Thursday,
                    Friday = db.Schedule.FirstOrDefault().Friday,
                    Saturday = db.Schedule.FirstOrDefault().Saturday,
                    Sunday = db.Schedule.FirstOrDefault().Sunday
                };
        }
    }

    public void GetStreamTimer()
    {
        using(var db = new DatabaseContext())
        {
            switch(DateTime.Now.DayOfWeek)
            {
                case DayOfWeek.Monday:
                    day = db.Schedule.FirstOrDefault().Monday;
                    break;
                case DayOfWeek.Tuesday:
                    day = db.Schedule.FirstOrDefault().Tuesday;
                    break;
                case DayOfWeek.Wednesday:
                    day = db.Schedule.FirstOrDefault().Wednesday;
                    break;
                case DayOfWeek.Thursday:
                    day = db.Schedule.FirstOrDefault().Thursday;
                    break;
                case DayOfWeek.Friday:
                    day = db.Schedule.FirstOrDefault().Friday;
                    break;
                case DayOfWeek.Saturday:
                    day = db.Schedule.FirstOrDefault().Saturday;
                    break;
                case DayOfWeek.Sunday:
                    day = db.Schedule.FirstOrDefault().Sunday;
                    break;
            }

            if(day == null)
            {
                isLiveToday = false;
                return;
            }
            else
            {
                var timer = new System.Timers.Timer(1000);
                timer.Elapsed += OnTimerElapsed;
                timer.Start();
                isLiveToday = true;
            }
        }
    }

    public void OnTimerElapsed(object sender, ElapsedEventArgs e)
    {
        var timeDifference = day - DateTime.Now.TimeOfDay;

        if (timeDifference.Value.TotalSeconds < 0)
        {
            isLiveToday = false;
            // API Request here to check if live?
        }
        else
        {
            _streamTimer = timeDifference.Value.Hours + " hours, " + timeDifference.Value.Minutes + " minutes and " + timeDifference.Value.Seconds + " seconds";
        }
        InvokeAsync(StateHasChanged);
    } 

}